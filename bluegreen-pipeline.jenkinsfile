def newversion = 'prod-v1.1'
def stage_image_tag = 'stage-v1.1'
def prod_project_name = 'myapp-prod'
def appName="jboss-tasks"
try {
   timeout(time: 1, unit: 'HOURS') {
      def tag="blue"
      def altTag="green"
      def verbose="false"

      node {
        project = prod_project_name
        stage('Sync Image To Prod'){
          def src = "docker://registry-stage.example.com/myapp/${appName}:${stage_image_tag}"
          def dest = "docker://registry.example.com/myapp/${appName}:${newversion}"
          sh 'skopeo  copy --src-tls-verify=false --dest-tls-verify=false --screds user1:<passwd> --dcreds user1:<passwd>  ' + src + ' ' + dest
        }

        stage('Waitting for Approve'){
          timeout(time:1, unit:'HOURS') {
            println "是否允许发布${stage_image_tag}版本镜像到生产环境？"
            input message: "Promote to Prod?", ok: "Promote"
          }
        }

        stage("Import New Images to OpenShift") {
          echo "import images registry.example.com/myapp/${appName}:${newversion}"
          sh "oc import-image jboss-tasks --all --insecure -n ${project}"
        }

        stage("Initialize") {
          sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' --loglevel=4 > activeservice"
          activeService = readFile('activeservice').trim()
          if (activeService == "${appName}-blue") {
            tag = "green"
            altTag = "blue"
          }
          sh "oc get route ${tag}-${appName} -n ${project} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"
          routeHost = readFile('routehost').trim()
        }


        stage("Deploy Test") {
          openshiftTag srcStream: appName, srcTag: newversion, destinationStream: appName, destinationTag: tag, verbose: verbose
          openshiftVerifyDeployment deploymentConfig: "${appName}-${tag}", verbose: verbose
        }

        stage("Test Traffic") {
          input message: "Test deployment: http://${routeHost}. Approve to change Traffic?", id: "approval"
        }

        stage("Go Live") {
          sh "oc set -n ${project} route-backends ${appName} ${appName}-${tag}=100 ${appName}-${altTag}=0 --loglevel=4"
        }
      }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}
